Q: Wir sollen bei der 1.2 in jedem Pfadknoten die Länge des Pfades speichern. Ist hierbei die Anzahl Node-Knoten gemeint,
 die Teil des Pfades sind, oder die Summe der Distanzen aus der distance-Property in Segment-Beziehungen?
A: Gedacht war die Anzahl der Knoten. Die tatsächliche Länge über das distance Attribut wäre jedoch auch nützlich und ein guter Bonus,
 wenn Ihr auch diesen in einem Attribut aufsummieren könnt.

Q: Wir wollten jedem Pfad ein id-Attribut geben, um ihn innerhalb eines Zeitschritts eindeutig identifizieren zu können. 
 Hierzu würden wir die Start-id und Ziel-id einfach verbinden (bspw. 456-378). Damit wäre ein Pfad eindeutig durch Start und Ziel definiert. 
 Wenn sich dann „in der Mitte“ des Pfades etwas ändert, hätte der Pfadknoten im nächsten Zeitschritt denselben Identifier. Ist das ein korrekter Ansatz?
A: Sofern Ihr mit "etwas ändert" meint, dass nur Knoten hinzugefügt oder entfernt werden, dann ja. Seid aber darauf bedacht,
 dass nur die global_id der Junction(s) dafür nutzbar ist, denn die "id" kann sich in jedem Zeitschritt ändern. Diese wird dadurch erzeugt, 
 dass die von der Simulation ausgegebene Liste von Objekten immer einfach nur durchgezählt wird.
 Sollte die Änderung in der Mitte durch die Entstehung einer neuen Junction sein, so endet die Lebensdauer des alten Pfades dadurch und zwei neue enstehen.

Q: zu 1.4: Hier müssen wir die Pfadknoten mit Start- und Endknoten eines Pfades verbinden. Nur nochmal zur Sicherheit,
 die Start- und Endknoten sind die jeweiligen Nodes und nicht die zugehörigen Junctions?
Ja, Start- und Endknoten eines Pfades sollen ein Node sein, jedoch genau die Nodes aus der die Junction(s) besteht/bestehen welche den Pfad bestimmen. 
Macht euch an dieser Stelle bitte Gedanken dazu, wie Ihr diese am besten designen könnt um die nachfolgende Analyse für euch so einfach wie möglich zu gestalten. 
Stellt euch selbst die Frage: Hat es Vorteile auch die Junctions direkt in Relation zu euren Pfadobjekten zu setzen?

Q: Beim Analysieren der Längenänderungen der Pfade (2.2) fehlen irgendwie Worte im zweiten Satz,
 du meinst wahrscheinlich als letztes noch Pfade, die ihre Länge nicht verändern oder?
A: Stimm, sorry, mein Fehler. Da sollte stehen: "Pfade die über Ihre Lebenszeit beides durchgehen." D.h. sie sich etwa zuerst verlängern und dann verkürzen. 
Das stellt dann eine Herausforderung in der Darstellung da und wie man dies etwa abgrenzt gegenüber dem Fall den du erwähnst, in welchem Sie sich gar nicht verändern.

Q: Wenn ich eine lang dauernde Query auf dem Server Laufen lasse (z.b. zum Erstellen von Knoten), muss „mein PC“ währenddessen auch aktiv sein? 
(Ich bin mir ziemlich sicher, dass das nicht der Fall ist :D)
A: Hierzu hab ich drei weitere Folien erstellt (Seite 6-8) wie man dies mit dem Programm Screen lösen kann. Für mich ist dies der Favorit,
 man kann aber auch alternative Tools wie "tmux" nutzen. Für euren Anwendungsfall empfehle ich aber stark bei screen zu bleiben,
 weil es wirklich einfach zu nutzen ist und alles kann was benötigt wird.

Q: Bei einem Pfad müssen Start- und Endknoten in derselben Loop sein. Start- und Endknoten sind jeweils ein Teil des Knotenpaares ihrer jeweiligen Junction.
 Muss der jeweils andere Knoten des Paares auch in derselben Loop sein, sprich die Junction komplett in der Loop sein?
 Bsp: Junction1 = (NodeA, NodeB), Junction 2 = (NodeC, NodeD), zwischen NodeB und NodeC existiert ein Pfad p. 
  Müssen NodeA und NodeD dann auch in derselben Loop sein wie NodeB und NodeD, damit p ein Pfad in unserem Sinne ist?
A: Ja, beide Knoten der Junction müssen Teil des Pfades sein, ansonsten müsste es vorkommen können, dass bei zwei Junctions nebeneinander, 
 welche 3 Loops miteinander verknüpfen, eine Junction aus einer nicht beteiligten Loop als Start/Endpunkt dient.
 Geht am bester immer so vor, dass Ihr erst eine Loop und alle deren Komponenten selektiert, auch die dazugehörigen Junctions, und dann erst die Pfade berechnet. 
 Damit sollte auch die Bedingung immer erfüllt bleiben, dass ein Pfad nur innerhalb der selben Loop existiert.
